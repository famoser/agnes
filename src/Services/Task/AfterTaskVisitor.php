<?php

namespace Agnes\Services\Task;

use Agnes\Models\Instance;
use Agnes\Models\Task\Deploy;
use Agnes\Models\Task\Rollback;
use Agnes\Services\Configuration\Task;
use Agnes\Services\InstanceService;

class AfterTaskVisitor extends AbstractTaskVisitor
{
    /**
     * @var InstanceService
     */
    private $instanceService;

    /**
     * @var TaskFactory
     */
    private $taskFactory;

    /**
     * @var Task
     */
    private $task;

    /**
     * AfterTaskVisitor constructor.
     */
    public function __construct(InstanceService $instanceService, TaskFactory $taskFactory, Task $task)
    {
        $this->instanceService = $instanceService;
        $this->taskFactory = $taskFactory;
        $this->task = $task;
    }

    public function visitDeploy(Deploy $deploy)
    {
        if (!$this->task->getFilter()->instanceMatches($deploy->getTarget())) {
            return null;
        }

        switch ($this->task->getName()) {
            case Deploy::NAME:
                return $this->taskFactory->createDeploy($deploy->getReleaseOrCommitish(), null);
            default:
                return null;
        }
    }

    public function visitRollback(Rollback $rollback)
    {
        return parent::visitRollback($rollback); // TODO: Change the autogenerated stub
    }

    private function createCopySharedActionFromDeployOrRollback(array $arguments, Instance $instance)
    {
        if (!isset($arguments['source'])) {
            $this->io->text('must specify source argument for a copy:shared action (like arguments: { source: production })');

            return;
        }

        $source = $arguments['source'];
        $action = $this->taskFactory->createCopyShared($instance, $source);
        $copyShared = $action->createSingle($instance, $source);
        if (null === $copyShared) {
            return;
        }

        $this->taskFactory->executePayload($action, $copyShared);
    }
}
